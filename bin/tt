#!/usr/bin/env python
import datetime
import os
import sys

from tt import exceptions
from tt import task
from tt import task_manager
from tt import utils


def init(manager):
    manager.initialize_state()


def add(manager, name_parts):
    name = ' '.join(name_parts)
    try:
        manager.add_task(name)
    except exceptions.TTException, e:
        die(e)


def get_pretty_duration(duration):
    """Return a human readable form of total duration"""
    #TODO: write code to go from secs -> min -> hours -> days -> weeks
    # -> months -> years
    # NOTE: For now, assume < 1 day
    assert duration.days == 0
    seconds = float(duration.seconds)
    minutes = seconds / 60
    seconds %= 60

    hours = minutes / 60
    minutes %= 60

    duration_str = "%02d:%02d:%02d" % (hours, minutes, seconds)
    return duration_str


def print_simple_status(manager, status):
    tasks = safe_get_tasks_by_status(manager, status)
    print status.upper()
    for task in tasks:
        print " - %s" % task.name


def print_timed_status(manager, status, duration_fn):
    durations = []
    tasks = safe_get_tasks_by_status(manager, status)
    print status.upper()
    for task in tasks:
        duration = duration_fn(task)
        pretty_duration = get_pretty_duration(duration)
        print " - %s (%s)" % (task.name, pretty_duration)
        durations.append(duration)

    total_duration = sum(durations, datetime.timedelta())

    return total_duration


def info(manager):
    duration_fn = task.Task.get_duration
    durations = []

    duration = print_timed_status(manager, "started", duration_fn)
    durations.append(duration)
    print

    duration = print_timed_status(manager, "stopped", duration_fn)
    durations.append(duration)
    print

    print_simple_status(manager, "pending")
    print

    duration = print_timed_status(manager, "done", duration_fn)
    durations.append(duration)
    print

    total_duration = sum(durations, datetime.timedelta())
    print "Total Duration: %s" % get_pretty_duration(total_duration)


def start(manager, task_id):
    """Starts a task """
    task = safe_get_task(manager, task_id)
    manager.start_task(task)


def stop(manager, task_id):
    task = safe_get_task(manager, task_id)
    manager.stop_task(task)


def done(manager, task_id):
    task = safe_get_task(manager, task_id)
    manager.done_task(task)


def close(manager):
    manager.close_done_tasks()


def delete(manager, task_id):
    task = safe_get_task(manager, task_id)
    manager.delete_task(task)


def report(manager, date_str):
    if date_str == "today":
        date = utils.get_now().date()
    elif date_str == "yesterday":
        date = utils.get_now().date()
        date = date - datetime.timedelta(days=1)

    print date
    print
    durations = []
    status = "started"
    tasks = manager.get_tasks_with_status_on_date(status, date)
    for task in tasks:
        duration = task.get_duration_for_date(date)
        durations.append(duration)
        pretty_duration = get_pretty_duration(duration)
        print " - %s (%s)" % (task.name, pretty_duration)

    print
    total_duration = sum(durations, datetime.timedelta())
    print "Total Duration: %s" % get_pretty_duration(total_duration)


def edit(manager, task_id):
    task = safe_get_task(manager, task_id)
    task_file = manager.get_task_file(task)
    os.system('vim %s' % task_file)


def safe_get_task(manager, task_id):
    try:
        task = manager.get_task(task_id)
        return task
    except exceptions.BadTaskId, e:
        die(e)


def safe_get_tasks_by_status(manager, status):
    try:
        tasks = manager.get_tasks_by_status(status)
        return tasks
    except exceptions.DirectoryNotFound, e:
        die(e)


def die(msg):
    print >>sys.stderr, "ERROR: %s" % msg
    sys.exit(1)


def usage():
    cmd = "tt"
    print "%s <init|add|start|close|done|edit|stop|info>" % cmd


def main():
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    #TODO: make this configurable
    TT_DIR = "~/.tt"
    task_manager.TaskManager.TT_DIR = TT_DIR
    manager = task_manager.TaskManager()

    action = sys.argv[1]
    if action == "init":
        init(manager)
    elif action == "add":
        name_parts = sys.argv[2:]
        add(manager, name_parts)
    elif action == "info":
        info(manager)
    elif action == "start":
        task_id = sys.argv[2]
        start(manager, task_id)
    elif action == "stop":
        task_id = sys.argv[2]
        stop(manager, task_id)
    elif action == "done":
        task_id = sys.argv[2]
        done(manager, task_id)
    elif action == "close":
        close(manager)
    elif action == "delete":
        task_id = sys.argv[2]
        delete(manager)
    elif action == "report":
        date_str = sys.argv[2]
        report(manager, date_str)
    elif action == "edit":
        task_id = sys.argv[2]
        edit(manager, task_id)
    else:
        die("Unrecognized command '%s'" % action)

if __name__ == "__main__":
    main()
