#!/usr/bin/env python
import datetime
import os
import sys

from tt import exceptions
from tt import task
from tt import task_manager
from tt import utils


def init(manager):
    manager.initialize_state()


def add(manager, argv):
    """Add tasks to tt

    Tasks can be added two ways:

    1. Directly on the command-line as part of the arguments list, e.g.
            tt add This is a task

    2. As list of tasks read from stdin, e.g.
            tt add < bunch_of_tasks.txt
    """
    if len(argv) > 2:
        # 1. arg list
        name = ' '.join(argv[2:])
        names = [name]
    else:
        # 2. stdin
        lines = sys.stdin.readlines()
        names = [l.strip() for l in lines if l.strip()]

    if not names:
        die("Nothing to add.")

    for name in names:
        try:
            manager.add_task(name)
        except exceptions.TTException, e:
            die(e)


def get_pretty_duration(duration):
    """Return a human readable form of total duration"""
    #TODO: write code to go from secs -> min -> hours -> days -> weeks
    # -> months -> years
    # NOTE: For now, assume < 1 day
    assert duration.days == 0
    seconds = float(duration.seconds)
    minutes = seconds / 60
    seconds %= 60

    hours = minutes / 60
    minutes %= 60

    duration_str = "%02d:%02d:%02d" % (hours, minutes, seconds)
    return duration_str


def print_simple_status(manager, status):
    tasks = safe_get_tasks_by_status(manager, status)
    print status.upper()
    for task in tasks:
        print " - %s" % task.name


def print_timed_status(manager, status, duration_fn):
    durations = []
    tasks = safe_get_tasks_by_status(manager, status)
    print status.upper()
    for task in tasks:
        duration = duration_fn(task)
        pretty_duration = get_pretty_duration(duration)
        print " - %s (%s)" % (task.name, pretty_duration)
        durations.append(duration)

    total_duration = sum(durations, datetime.timedelta())

    return total_duration


def ls(manager):
    duration_fn = task.Task.get_duration
    for status in ("started", "stopped", "pending", "done"):
        if status == "pending":
            print_simple_status(manager, status)
        else:
            print_timed_status(manager, status, duration_fn)
        print


def start(manager, task_id):
    """Starts a task """
    task = safe_get_task(manager, task_id)
    manager.start_task(task)


def stop(manager):
    try:
        manager.stop_current_task()
    except exceptions.TTException, e:
        die(e)

def done(manager, task_id):
    task = safe_get_task(manager, task_id)
    manager.done_task(task)


def close(manager):
    manager.close_done_tasks()


def rm(manager, task_id):
    task = safe_get_task(manager, task_id)
    manager.delete_task(task)


def report(manager, date_str):
    if date_str == "week":
        weekly_report(manager)
    elif date_str == "today":
        date = utils.get_now().date()
        daily_report(manager, date)
    elif date_str == "yesterday":
        date = utils.get_now().date()
        date = date - datetime.timedelta(days=1)
        daily_report(manager, date)
    else:
        date = utils.get_date_from_str(date_str)
        daily_report(manager, date)


def weekly_report(manager, days_back=7):
    now = utils.get_now()
    dates = []
    for day_back in range(days_back):
        dt = now - datetime.timedelta(days=day_back)
        date = dt.date()
        dates.append(date)

    for date in dates:
        status = "started"
        tasks = manager.get_tasks_with_status_on_date(status, date)

        durations = []
        for task in tasks:
            duration = task.get_duration_for_date(date)
            durations.append(duration)

        duration_for_date = sum(durations, datetime.timedelta())
        pretty_duration_for_date = get_pretty_duration(duration_for_date)
        print "%s: %s" % (date, pretty_duration_for_date)


def daily_report(manager, date):
    print date
    durations = []
    status = "started"
    tasks = manager.get_tasks_with_status_on_date(status, date)
    for task in tasks:
        duration = task.get_duration_for_date(date)
        durations.append(duration)
        pretty_duration = get_pretty_duration(duration)
        print " - %s (%s)" % (task.name, pretty_duration)

    print
    total_duration = sum(durations, datetime.timedelta())
    print "Total Duration: %s" % get_pretty_duration(total_duration)


def edit(manager, task_id):
    task = safe_get_task(manager, task_id)
    task_file = manager.get_task_file(task)
    os.system('vim %s' % task_file)


def safe_get_task(manager, task_id):
    try:
        task = manager.get_task(task_id)
        return task
    except exceptions.BadTaskId, e:
        die(e)


def safe_get_tasks_by_status(manager, status):
    try:
        tasks = manager.get_tasks_by_status(status)
        return tasks
    except exceptions.DirectoryNotFound, e:
        die(e)


def die(msg):
    print >>sys.stderr, "ERROR: %s" % msg
    sys.exit(1)


def usage():
    cmd = "tt"
    print "%s <init|add|start|close|done|edit|stop|ls>" % cmd


def main():
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    tt_dir = "~/.tt"
    manager = task_manager.TaskManager(tt_dir)

    action = sys.argv[1]
    if action == "init":
        init(manager)
    elif action == "add":
        add(manager, sys.argv)
    elif action == "ls":
        ls(manager)
    elif action == "start":
        task_id = sys.argv[2]
        start(manager, task_id)
    elif action == "stop":
        stop(manager)
    elif action == "done":
        task_id = sys.argv[2]
        done(manager, task_id)
    elif action == "close":
        close(manager)
    elif action == "rm":
        task_id = sys.argv[2]
        rm(manager, task_id)
    elif action == "report":
        date_str = sys.argv[2]
        report(manager, date_str)
    elif action == "edit":
        task_id = sys.argv[2]
        edit(manager, task_id)
    else:
        die("Unrecognized command '%s'" % action)

if __name__ == "__main__":
    main()
